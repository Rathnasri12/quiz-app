<!DOCTYPE html>
<html>
<head>
  <title>Quiz</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f7f7f7;
      margin: 0;
      padding: 20px;
    }

    h2 {
      text-align: center;
      font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
      color: #4B0082;
    }

    h3 {
      background: #333;
      color: white;
      padding: 10px;
      border-radius: 5px;
      text-align: center;
    }

    .category-section {
      display: none;
      padding: 20px;
    }

    .active {
      display: block;
    }

    .question-block {
      margin-bottom: 20px;
    }

    .option {
      display: block;
      margin: 6px 0;
      font-size: 16px;
    }

    input[type="radio"] {
      margin-right: 8px;
    }

    button {
      margin-top: 20px;
      padding: 10px 20px;
      background-color: #4B0082;
      border: none;
      color: white;
      font-size: 16px;
      cursor: pointer;
    }

    #preview {
      display: block;
      margin: 20px auto;
      border: 2px solid #4B0082;
      border-radius: 10px;
    }
  </style>
</head>
<body>

  <h2>Welcome <%= name %>!</h2>
  <video id="preview" width="300" autoplay muted></video>

  <form id="quizForm" method="POST" action="/submit">
    <% categories.forEach((cat, index) => { %>
      <div class="category-section" id="cat<%= index %>">
        <h3><%= cat %></h3>
        <% categorizedQuestions[cat].forEach(q => { %>
          <div class="question-block">
            <p><%= q.question %></p>
            <% q.options.forEach(opt => { %>
              <label class="option">
                <input type="radio" name="q<%= q._id %>" value="<%= opt %>"> <%= opt %>
              </label>
            <% }) %>
          </div>
        <% }) %>
        <% if (index < categories.length - 1) { %>
          <button type="button" class="next-btn" data-index="<%= index %>">Next</button>
        <% } else { %>
          <button type="submit">Submit</button>
        <% } %>
      </div>
    <% }) %>
  </form>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      document.getElementById('cat0').classList.add('active');

      document.querySelectorAll('.next-btn').forEach(btn => {
        btn.addEventListener('click', function () {
          const index = parseInt(this.getAttribute('data-index'));
          document.getElementById('cat' + index).classList.remove('active');
          document.getElementById('cat' + (index + 1)).classList.add('active');
        });
      });
    });

    // ========== Tab Switch Tracking ==========
    let tabSwitchCount = 0;
    window.addEventListener("blur", () => {
      tabSwitchCount++;
      if (tabSwitchCount > 2) {
        alert("You have switched tabs too many times. Quiz will end now.");
        window.location.href = "/";
      } else {
        alert("Don't switch tabs! Warning " + tabSwitchCount + "/2");
      }
    });

    // Report tab switch to server
    document.addEventListener('visibilitychange', function () {
      if (document.hidden) {
        fetch('/tab-switched', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({})
        });
      }
    });

   // ========== Camera Recording ==========
let mediaRecorder;
let recordedChunks = [];

async function startCamera() {
  try {
    const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
    document.getElementById('preview').srcObject = stream;

    mediaRecorder = new MediaRecorder(stream);
    mediaRecorder.ondataavailable = (e) => {
      if (e.data.size > 0) recordedChunks.push(e.data);
    };

    mediaRecorder.start();
    console.log("üé• Recording started");

    setTimeout(() => {
      if (mediaRecorder && mediaRecorder.state !== 'inactive') {
        mediaRecorder.stop();
        console.log("üõë Auto-stopped after 45 mins");
      }
    }, 45 * 60 * 1000);
  } catch (err) {
    alert("‚ùå Camera access denied!");
    console.error(err);
  }
}

window.onload = startCamera;

document.getElementById('quizForm').addEventListener('submit', function (e) {
  e.preventDefault();

  // Define onstop before stopping the recorder
  mediaRecorder.onstop = async () => {
    const blob = new Blob(recordedChunks, { type: 'video/webm' });
    const formData = new FormData();
    formData.append('video', blob, '<%= email.replace(/[@.]/g, "_") %>.webm');

    try {
      await fetch('/upload-video', {
        method: 'POST',
        body: formData
      });
      console.log("‚úÖ Video uploaded");
    } catch (err) {
      console.error("‚ùå Upload failed:", err);
    }

    e.target.submit();
  };

  if (mediaRecorder && mediaRecorder.state !== 'inactive') {
    mediaRecorder.stop();
  } else {
    e.target.submit(); // fallback if already stopped
  }
});

  </script>
</body>
</html>
